<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Vue3-Vite批量注册全局组件]]></title>
    <url>%2F2021%2F04%2F27%2FVue3-Vite%E6%89%B9%E9%87%8F%E6%B3%A8%E5%86%8C%E5%85%A8%E5%B1%80%E7%BB%84%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[Vue3-Vite批量注册全局组件 项目目录如下所示 在公共全局组件目录下建立入口文件，添加方法 1234567891011121314export default function registerComponent(app)&#123; const modules = import.meta.globEager(&apos;./*.vue&apos;) for (const path in modules)&#123; const componentName = changeStr( path.replace(/^\.\//, &apos;&apos;).replace(/\.\w+$/, &apos;&apos;) ) const config = modules[path].default || config app.component(componentName, config) &#125;&#125;function changeStr(str)&#123; return str.charAt(0).toUpperCase() + str.slice(1);&#125; 在main.js中引入公用全局组件注册方法 123456import &#123; createApp &#125; from &apos;vue&apos;import App from &apos;./App.vue&apos;import global from &apos;@/components/common&apos;const app = createApp(App)global(app)app.mount(&apos;#app&apos;) 测试结果如下：]]></content>
  </entry>
  <entry>
    <title><![CDATA[Python-pysmb实现文件共享]]></title>
    <url>%2F2019%2F09%2F10%2FPython-pysmb%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%2F</url>
    <content type="text"><![CDATA[pysmb is an experimental SMB/CIFS library written in Python pip进行pysmb安装 pip install pysmb pysmb详细功能属性请参照官方文档 实例代码如下 from smb.SMBConnection import SMBConnection import socket def main(): server_name = socket.getfqdn(address_ip) # server_name should match the remote machine name, or else the connection will be rejected conn = SMBConnection(username, password, &apos;func_handle&apos;, server_name, domain, use_ntlm_v2=True, sign_options=SMBConnection.SIGN_WHEN_SUPPORTED, is_direct_tcp=True) # tcp port: 445 || NetBIOS port: 139 connected = conn.connect(server_name, 445) # getAttributes(service_name, path, timeout=30) # list share files # listPath(service_name, path, search=65591, pattern=&apos;*&apos;, timeout=30) #file_obj = tempfile.NamedTemporaryFile() #file_attributes, filesize = conn.retrieveFile(&apos;smbtest&apos;, &apos;/rfc1001.txt&apos;, file_obj) if &apos;__name__&apos; == &apos;__main__&apos;: main()]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Image Of Base64 String Convert To Png|Jpg]]></title>
    <url>%2F2019%2F09%2F03%2FBase64ConvertImage%2F</url>
    <content type="text"><![CDATA[JS实现图片Base64格式转化为Png/Jpg,并保存至本地const Base64ConvertToImage = (saveName, b64Info, contType) =&gt; { /** base64文件流并保存到本地png/jpg*/ const b64toBlob = (b64Data, contentType = &quot;image/png&quot;, sliceSize = 512) =&gt; { //-- parse base64 string const byteCharacters = window.atob(b64Data); const byteArrays = []; for (let offset = 0; offset &lt; byteCharacters.length; offset += sliceSize) { const slice = byteCharacters.slice(offset, offset + sliceSize); const byteNumbers = new Array(slice.length); for (let i = 0; i &lt; slice.length; i++) { byteNumbers[i] = slice.charCodeAt(i); } //-- https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array const byteArray = new Uint8Array(byteNumbers); byteArrays.push(byteArray); } //-- https://developer.mozilla.org/zh-CN/docs/Web/API/Blob const blob = new Blob(byteArrays, { type: contentType }); return blob; } const blob = b64toBlob(b64Info, contType); //-- https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL //-- URL.createObjectURL() 静态方法会创建一个 DOMString const blobUrl = URL.createObjectURL(blob); const aEle = document.createElement(&quot;a&quot;); const evt = document.createEvent(&quot;HTMLEvents&quot;); //-- 初始化，事件类型，是否冒泡，是否阻止浏览器的默认行为 evt.initEvent(&quot;click&quot;, true, true); aEle.download = saveName; aEle.href = blobUrl; aEle.click(); } export default Base64ConvertToImage; 参考资料： https://www.zhangxinxu.com/wordpress/2018/08/js-base64-atob-btoa-encode-decode/ https://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS时间正则格式化]]></title>
    <url>%2F2019%2F05%2F26%2Fjs%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96%2F</url>
    <content type="text"><![CDATA[Js正则时间格式化 数字字符串格式转datetime格式 let timeStr = ‘20190526153600’timeStr = timeStr.replace(/^(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})$/, ‘$1-$2-$3 $4:$5:%6’)console.log(timeStr) //- - 2019-05-25 15:36:00 含有汉字的时间格式提取为【yyyy-mm-dd】 let dtDate = ‘2019年05月26日 15:40:23’dtDate = dtDate.replace(/(\d{4}).(\d{1,2}).(\d{1,2}).+/mg, ‘$1-$2-$3’)console.log(dtDate) //- - 2019-05-26 含有汉字的时间格式提取为【yyyymmdd】 let dtData = ‘2019年05月26日 15:40:23’dtDate = dtDate.replace(/[^[0-9]]/mg,’’).match(/.\d{8}/)console.log(dtDate) //- - 20190526]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS在线预览Excel]]></title>
    <url>%2F2019%2F05%2F19%2FJS%E5%9C%A8%E7%BA%BF%E9%A2%84%E8%A7%88Excel%2F</url>
    <content type="text"><![CDATA[前端实现Excel内容预览 主要通过js-xlsx读取本地或者服务端的Excel的内容，实际业务中可以根据需求进行不同的处理操作。 具体的实现过程可参照js-xlsx官网体统的demo，也可以参照如下简易版GridDemo进行实际的业务扩展。]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue-Cli3设置公用Less文件]]></title>
    <url>%2F2019%2F04%2F21%2FVue-Cli3%E8%AE%BE%E7%BD%AE%E5%85%AC%E7%94%A8Less%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[在Vue-Cli3中设置公用的Less文件【针对Vue-Cli3环境】 首页引入vue add style-resources-loader vue add style-resources-loader 在vue.config.js增加以下内容 const path = require(‘path’)modules.exports = {&nbsp; &nbsp; pluginOptions: {&nbsp; &nbsp; ‘style-resource-loader’:{&nbsp; &nbsp; &nbsp; &nbsp; ‘patterns’: [&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;path.resolve(__dirname, ‘src/styles/abstracts/*.style’)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;]&nbsp; &nbsp; &nbsp; &nbsp; }&nbsp; &nbsp;}}]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQLServer删除重复记录]]></title>
    <url>%2F2019%2F04%2F21%2FSQLServer%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[SQL Server过滤重复记录 有时候业务数据表中直接查询得出的数据可能含有重复的记录，此时就需要我们去过滤一些重复的数据。 根据单个字段（user_id）来进行判断 select * from users where user_id in(select user_id from users group by user_id having count(user_id) &gt; 1) or select * from users where user_id in(select user_id from users group by user_id having count(user_id &gt; 1) and row_id not in(select min(row_id) from users group by user_id having count(user_id) &gt; 1) 根据多个字段进行筛选 select * from users as a where (a.user_id,a.phone in (select user_id, phone from users group by user_id, phone having count(1) &gt; 1)) or select * from users as a where(a.user_id, a.phone in (select user_id, phone from users group by user_id, phone having count(1) &gt; 1) and row_id not in(select min(row_id) from users group by user_id,phone having count(1) &gt; 1)]]></content>
      <tags>
        <tag>SQL Server</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Will Fine, And You!]]></title>
    <url>%2F2019%2F04%2F15%2F20190415-%E6%97%A5%E5%B8%B8%E9%9A%8F%E7%AC%94%2F</url>
    <content type="text"><![CDATA[Will you date me ? Breath if yes.]]></content>
      <categories>
        <category>日常随笔</category>
      </categories>
  </entry>
</search>
